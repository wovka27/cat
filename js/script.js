(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
  "use strict";
  
  var modl = function modl() {
    return "\n<section class=\"modal\">\n  <div class=\"modal__icon\">\n    <svg class=\"modal__cat\">\n      <use xlink:href=\"#cat\"></use>\n    </svg>\n  </div>\n  <div class=\"modal__title\">\n    <h2>\u041D\u0435 \u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u044B\u0439 Email</h2>\n  </div>\n  <a href=\"#!\" class=\"modal__btn\">&times;</a>\n</section>\n";
  };
  
  var $el = document.querySelector('input[type="email"]');
  
  function validEmail(e) {
    e.preventDefault();
    var reg = /^(\S+)@([a-z0-9-]+)(\.)([a-z]{2,4})(\.?)([a-z]{0,4})+$/i;
  
    if (reg.test(String(e.target.value).toLowerCase())) {
      modalText.innerText = "Email подходит";
      modal.classList.add("active");
      modal.style.backgroundColor = "greenYellow";
    } else if (!reg.test(String(e.target.value).toLowerCase())) {
      modalText.innerText = "Email не подходит";
      modal.classList.add("active");
      modal.style.backgroundColor = "red";
    }
  }
  
  $el.oninput = validEmail; // === Динамический адаптив ===
  
  function DynamicAdapt(type) {
    this.type = type;
  }
  
  DynamicAdapt.prototype.init = function () {
    var _this2 = this;
  
    var _this = this; // массив объектов
  
  
    this.оbjects = [];
    this.daClassname = "_dynamic_adapt_"; // массив DOM-элементов
  
    this.nodes = document.querySelectorAll("[data-da]"); // наполнение оbjects объктами
  
    for (var i = 0; i < this.nodes.length; i++) {
      var node = this.nodes[i];
      var data = node.dataset.da.trim();
      var dataArray = data.split(",");
      var оbject = {};
      оbject.element = node;
      оbject.parent = node.parentNode;
      оbject.destination = document.querySelector(dataArray[0].trim());
      оbject.breakpoint = dataArray[1] ? dataArray[1].trim() : "767";
      оbject.place = dataArray[2] ? dataArray[2].trim() : "last";
      оbject.index = this.indexInParent(оbject.parent, оbject.element);
      this.оbjects.push(оbject);
    }
  
    this.arraySort(this.оbjects); // массив уникальных медиа-запросов
  
    this.mediaQueries = Array.prototype.map.call(this.оbjects, function (item) {
      return "(" + this.type + "-width: " + item.breakpoint + "px)," + item.breakpoint;
    }, this);
    this.mediaQueries = Array.prototype.filter.call(this.mediaQueries, function (item, index, self) {
      return Array.prototype.indexOf.call(self, item) === index;
    }); // навешивание слушателя на медиа-запрос
    // и вызов обработчика при первом запуске
  
    var _loop = function _loop(_i) {
      var media = _this2.mediaQueries[_i];
      var mediaSplit = String.prototype.split.call(media, ",");
      var matchMedia = window.matchMedia(mediaSplit[0]);
      var mediaBreakpoint = mediaSplit[1]; // массив объектов с подходящим брейкпоинтом
  
      var оbjectsFilter = Array.prototype.filter.call(_this2.оbjects, function (item) {
        return item.breakpoint === mediaBreakpoint;
      });
      matchMedia.addListener(function () {
        _this.mediaHandler(matchMedia, оbjectsFilter);
      });
  
      _this2.mediaHandler(matchMedia, оbjectsFilter);
    };
  
    for (var _i = 0; _i < this.mediaQueries.length; _i++) {
      _loop(_i);
    }
  };
  
  DynamicAdapt.prototype.mediaHandler = function (matchMedia, оbjects) {
    if (matchMedia.matches) {
      for (var i = 0; i < оbjects.length; i++) {
        var оbject = оbjects[i];
        оbject.index = this.indexInParent(оbject.parent, оbject.element);
        this.moveTo(оbject.place, оbject.element, оbject.destination);
      }
    } else {
      for (var _i2 = 0; _i2 < оbjects.length; _i2++) {
        var _оbject = оbjects[_i2];
  
        if (_оbject.element.classList.contains(this.daClassname)) {
          this.moveBack(_оbject.parent, _оbject.element, _оbject.index);
        }
      }
    }
  }; // Функция перемещения
  
  
  DynamicAdapt.prototype.moveTo = function (place, element, destination) {
    element.classList.add(this.daClassname);
  
    if (place === "last" || place >= destination.children.length) {
      destination.insertAdjacentElement("beforeend", element);
      return;
    }
  
    if (place === "first") {
      destination.insertAdjacentElement("afterbegin", element);
      return;
    }
  
    destination.children[place].insertAdjacentElement("beforebegin", element);
  }; // Функция возврата
  
  
  DynamicAdapt.prototype.moveBack = function (parent, element, index) {
    element.classList.remove(this.daClassname);
  
    if (parent.children[index] !== undefined) {
      parent.children[index].insertAdjacentElement("beforebegin", element);
    } else {
      parent.insertAdjacentElement("beforeend", element);
    }
  }; // Функция получения индекса внутри родителя
  
  
  DynamicAdapt.prototype.indexInParent = function (parent, element) {
    var array = Array.prototype.slice.call(parent.children);
    return Array.prototype.indexOf.call(array, element);
  }; // Функция сортировки массива по breakpoint и place
  // по возрастанию для this.type = min
  // по убыванию для this.type = max
  
  
  DynamicAdapt.prototype.arraySort = function (arr) {
    if (this.type === "min") {
      Array.prototype.sort.call(arr, function (a, b) {
        if (a.breakpoint === b.breakpoint) {
          if (a.place === b.place) {
            return 0;
          }
  
          if (a.place === "first" || b.place === "last") {
            return -1;
          }
  
          if (a.place === "last" || b.place === "first") {
            return 1;
          }
  
          return a.place - b.place;
        }
  
        return a.breakpoint - b.breakpoint;
      });
    } else {
      Array.prototype.sort.call(arr, function (a, b) {
        if (a.breakpoint === b.breakpoint) {
          if (a.place === b.place) {
            return 0;
          }
  
          if (a.place === "first" || b.place === "last") {
            return 1;
          }
  
          if (a.place === "last" || b.place === "first") {
            return -1;
          }
  
          return b.place - a.place;
        }
  
        return b.breakpoint - a.breakpoint;
      });
      return;
    }
  }; // === / Динамический адаптив ===
  
  
  var btn = document.querySelector(".header__row-burger");
  
  function clickBurger() {
    btn.classList.toggle('active');
    btn.previousElementSibling.classList.toggle('active');
    document.body.classList.toggle('lock');
  }
  
  btn.addEventListener('click', clickBurger);
  var catModels = [{
    id: Math.round(Number(Date.now() / (Math.random() * 33))),
    title: "Кот полосатый",
    color: "Коричневый окрас",
    age: "5",
    pawsCount: "1",
    url: "./img/card_cat2.png",
    sold: true,
    sale: false,
    price: "9 000"
  }, {
    id: Math.round(Number(Date.now() / (Math.random() * 33))),
    title: "Кот полосатый",
    color: "Коричневый окрас",
    age: "9",
    pawsCount: "1",
    url: "./img/card_cat1.png",
    sold: false,
    sale: true,
    price: "1 000"
  }, {
    id: Math.round(Number(Date.now() / (Math.random() * 33))),
    title: "Кот полосатый",
    color: "Коричневый окрас",
    age: "1",
    pawsCount: "1",
    url: "./img/card_cat3.png",
    sold: true,
    sale: false,
    price: "5 000"
  }, {
    id: Math.round(Number(Date.now() / (Math.random() * 33))),
    title: "Кот полосатый",
    color: "Коричневый окрас",
    age: "8",
    pawsCount: "1",
    url: "./img/card_cat1.png",
    sold: false,
    sale: false,
    price: "84 000"
  }, {
    id: Math.round(Number(Date.now() / (Math.random() * 33))),
    title: "Кот полосатый",
    color: "Коричневый окрас",
    age: "4",
    pawsCount: "1",
    url: "./img/card_cat3.png",
    sold: true,
    sale: false,
    price: "27 000"
  }, {
    id: Math.round(Number(Date.now() / (Math.random() * 33))),
    title: "Кот полосатый",
    color: "Коричневый окрас",
    age: "7",
    pawsCount: "1",
    url: "./img/card_cat2.png",
    sold: true,
    sale: true,
    price: "60 000"
  }, {
    id: Math.round(Number(Date.now() / (Math.random() * 33))),
    title: "Кот полосатый",
    color: "Коричневый окрас",
    age: "3",
    pawsCount: "1",
    url: "./img/card_cat3.png",
    sold: false,
    sale: false,
    price: "30 000"
  }, {
    id: Math.round(Number(Date.now() / (Math.random() * 33))),
    title: "Кот полосатый",
    color: "Коричневый окрас",
    age: "2",
    pawsCount: "1",
    url: "./img/card_cat1.png",
    sold: false,
    sale: true,
    price: "10 000"
  }, {
    id: Math.round(Number(Date.now() / (Math.random() * 33))),
    title: "Кот полосатый",
    color: "Коричневый окрас",
    age: "10",
    pawsCount: "1",
    url: "./img/card_cat2.png",
    sold: true,
    sale: false,
    price: "60 000"
  }];
  
  function model(card) {
    return "\n  <div id=".concat(card.id, " class=\"content-body__card\">\n    <div class=\"content-body__card-row card-image\">\n      <img src=").concat(card.url, " alt=\"").concat(card.url, "\" />\n      <div class=\"like\">\n        <svg>\n          <use xlink:href=\"#like\"></use>\n        </svg>\n      </div>\n      ").concat(card.sale ? '<div class="sale">-40%</div>' : "", "\n    </div>\n    <div class=\"content-body__card-row card-desc\">\n      <div class=\"card-desc__row\">\n        <div class=\"card-desc__row-title\">\n          <h2 data-obj=\"").concat(card.title, "\">").concat(card.title, "</h2>\n        </div>\n        <div class=\"card-desc__row-desc\">\n          <p>").concat(card.color, "</p>\n          <p>\n            <span data-age=").concat(card.age, "><b>").concat(card.age, " \u043C\u0435\u0441.</b></span>\n            <span>\u0432\u043E\u0437\u0440\u0430\u0441\u0442</span>\n          </p>\n          <p>\n            <span data-obj=\"").concat(card.pawsCount, "\"><b>").concat(card.pawsCount, "</b></span>\n            <span>\u041A\u043E\u043B-\u0432\u043E \u043B\u0430\u043F</span>\n          </p>\n        </div>\n      <div data-price=").concat(card.price, " class=\"card-desc__row-price\"><h3><b>").concat(card.price, " \u0440\u0443\u0431.</b></h3></div>\n    </div>\n    <div class=\"card-desc__row\">\n      <button ").concat(card.sold ? 'disabled' : '', " class=\"").concat(card.sold ? "sold" : "", "\">\n        ").concat(card.sold ? "Продан" : "Купить", "\n      </button>\n    </div>\n  </div>\n  </div>\n");
  }
  
  var cat = document.querySelector(".favorites");
  var dialog = document.querySelector(".dialog");
  var dialogBody = dialog.querySelector("#dBody");
  
  var dialogItem = function dialogItem(item) {
    return "\n  <div class=\"dialog__item ".concat(catArray && localStorage.catArr ? "active" : "", "\">\n    <div class=\"dialog__item-column column-img\">\n      <img src=").concat(item.url, " alt=\"\u0444\u043E\u0442\u043E \u043A\u043E\u0442\u0435\u0439\u043A\u0438\">\n    </div>\n    <div class=\"dialog__item-column column-desc\">\n      <p>\n        <span><b>").concat(item.age, "</b> \u043C\u0435\u0441.</span>\n        <span>\u0412\u043E\u0437\u0440\u0430\u0441\u0442</span>\n      </p>\n    </div>\n    <div class=\"dialog__item-column column-btn\">\n      <button ").concat(item.sold ? 'disabled' : '', " class=").concat(item.sold ? "sold" : "", ">\n        ").concat(item.sold ? "Продано" : "Купить", "\n      </button>\n      <button class=\"column-btn__delete\" data-id=").concat(item.id, ">\u0423\u0431\u0440\u0430\u0442\u044C</button>\n    </div>\n  </div>\n");
  };
  
  var dialogNull = function dialogNull() {
    return "<span class=\"not-cat\">\u0421\u043F\u0438\u0441\u043E\u043A \u043F\u0443\u0441\u0442...</span>";
  };
  
  var contentList = document.querySelector(".content-body__list");
  var toHTML = catModels.map(model).join("");
  
  var timeout = function timeout() {
    setTimeout(function () {
      modal.classList.remove("active");
    }, 2000);
  };
  
  contentList.insertAdjacentHTML("afterbegin", toHTML);
  var likeBtn = document.querySelectorAll(".like");
  var catArray = new Array();
  var catFilter = [];
  
  var catsLength = function catsLength() {
    var catIcon = "\n    <svg class=\"modal__cat\">\n      <use xlink:href=\"#cat\"></use>\n    </svg>\n  ";
    cat.firstElementChild.innerHTML = "".concat(catArray.length ? catArray.length + 1 : catIcon);
    cat.firstElementChild.classList.add("text");
  };
  
  function activeLike() {
    likeBtn.forEach(function (item) {
      item.addEventListener("click", function () {
        var classActive = item.classList.contains("active");
  
        if (!classActive) {
          catsLength();
          item.classList.add("active");
          modal.classList.add("active");
          timeout();
        }
  
        if (classActive) {
          item.classList.remove("active");
          modalText.innerText = "Удалено из избранного";
          modal.classList.add("active");
          timeout();
        }
      });
    });
  }
  
  var renderCat = function renderCat() {
    return dialogBody.innerHTML = "".concat(catArray.map(function (item) {
      return dialogItem(item);
    }).join(""));
  };
  
  function getCatData() {
    Array.from(contentList.children).map(function (child) {
      child.addEventListener("click", function (e) {
        catModels.map(function (mdl) {
          mdl.id === Number(child.id) && e.target.closest(".like") && catArray.push(mdl);
        });
        renderCat();
      });
    });
  }
  
  getCatData();
  activeLike();
  
  function filterPrice() {
    var temp = JSON.parse(JSON.stringify(catModels));
    temp.forEach(function (model) {
      return model.price = +model.price.replace(/\D/g, "");
    });
    temp.sort(function (a, b) {
      return a.price > b.price ? 1 : -1;
    });
    contentList.innerHTML = "".concat(temp.map(model).join(""));
  }
  
  function filterAge() {
    var temp = JSON.parse(JSON.stringify(catModels));
    temp.forEach(function (model) {
      return model.age = +model.age.replace(/\D/g, "");
    });
    temp.sort(function (a, b) {
      return a.age > b.age ? 1 : -1;
    });
    contentList.innerHTML = "".concat(temp.map(model).join(""));
  }
  
  cat.addEventListener("click", function (e) {
    if (e.target.closest("#catbtn")) {
      dialog.classList.add("active");
      document.body.classList.add("lock");
    }
  });
  var da = new DynamicAdapt("max");
  da.init();
  var btnUp = document.querySelector('#btnUp');
  
  function showUp() {
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  }
  
  btnUp.addEventListener('click', showUp);
  var btnShowCat = document.querySelector('#btnShowCat');
  
  function showCat(e) {
    e.preventDefault();
    contentList.insertAdjacentHTML("beforeend", toHTML);
  }
  
  btnShowCat.addEventListener('click', showCat);
  var modal = document.querySelector('.modal');
  var modalText = modal.querySelector('h2');
  modal.addEventListener('click', function (e) {
    var target = e.target;
    var targetClassName = target.className === 'modal__btn';
    targetClassName && modal.classList.remove('active');
  });
  var sort = document.querySelector('.content-header');
  sort.addEventListener('click', function (e) {
    e.preventDefault();
  
    if (e.target.closest('#price')) {
      filterPrice();
      e.target.closest('#price').parentElement.classList.add('active');
    }
  
    ;
  
    if (e.target.closest('#age')) {
      filterAge();
      e.target.closest('#age').parentElement.classList.add('active');
    }
  
    ;
  });
  dialog.addEventListener('click', function (e) {
    var classRemove = function classRemove() {
      dialog.classList.remove('active');
      document.body.classList.remove('lock');
    };
  
    e.target.closest('.dialog__actions button') && classRemove();
    !e.target.closest('.dialog__wrap') && classRemove();
  
    if (e.target.closest('.column-btn__delete')) {
      var deleteBtn = document.querySelectorAll('.column-btn__delete');
      deleteBtn.forEach(function (btn) {
        return catArray.filter(function (itm) {
          return +btn.dataset.id === itm.id;
        }).map(function (item) {
          return dialogItem(item);
        }).join('');
      });
      e.target.closest('.dialog__item').classList.add('hidden');
      catArray.splice(catArray.findIndex(function (i) {
        return i.id === +e.target.dataset.id;
      }), 1);
      setTimeout(function () {
        dialogBody.innerHTML = "".concat(catArray.length ? catArray.map(function (item) {
          return dialogItem(item);
        }).join('') : dialogNull());
        catsLength();
      }, 200);
    }
  });
  dialogBody.innerHTML = "".concat(dialogNull());
  
  var modelGallery = function modelGallery(item) {
    return "<img class=\"gallery__img\" src=\"".concat(item.url, "\" alt=").concat(item.title, ">");
  };
  
  var $gallery = document.querySelector('.gallery');
  var $galleryBody = document.querySelector('.gallery__body-wrap');
  var $cardImage = document.querySelectorAll('.card-image img');
  var imageArray = [];
  
  function getImageCard() {
    $cardImage.forEach(function (image) {
      image.addEventListener('click', function (e) {
        var targetParentId = Number(e.target.closest('.content-body__card').id);
        catModels.map(function (img) {
          img.url === image.alt && img.id === targetParentId && imageArray.push(img);
        });
        var imgCat = imageArray.splice(imageArray.includes(function (item) {
          return item.url === image.alt;
        })).map(function (item) {
          return modelGallery(item);
        }).join('');
        $galleryBody.innerHTML = "".concat(imgCat);
        $gallery.classList.add('active');
        document.body.classList.add('lock');
      });
    });
  }
  
  getImageCard();
  $gallery.addEventListener('click', function (e) {
    var classRemove = function classRemove() {
      $gallery.classList.remove('active');
      document.body.classList.remove('lock');
    };
  
    !e.target.closest('.gallery__wrap') && classRemove();
  });
  
  },{}]},{},[1])
  
  //# sourceMappingURL=data:application/json;charset=utf8;base64,
  